var _=require("underscore"),machina=require("../machina.js"),RemoteClientProxy=function(a,b,c){var d=function(b){var c=this;c.subscriptions[b.channel]||(c.subscriptions[b.channel]={}),c.subscriptions[b.channel][b.topic]||(c.subscriptions[b.channel][b.topic]=a.subscribe({channel:b.channel,topic:b.topic,callback:function(a,b){c.handle("socketTransmit",a,b)}}).withConstraint(function(a,b){return b.correlationId?b.correlationId===c.sessionId:!0}))},e=new machina.Fsm({socket:b,subscriptions:{},getClientState:function(){return{queuedMsgs:_.filter(this.eventQueue,function(a){return a.args[0]==="socketTransmit"})}},sessionId:null,states:{connecting:{"*":function(){this.deferUntilTransition()},clientId:function(a){this.sessionId=a.sessionId,c.enableMigration&&a.lastSessionId&&a.lastSessionId!==a.sessionId?(this.lastSessionId=a.lastSessionId,this.transition("migrating")):this.transition("connected")}},migrating:{_onEnter:function(){this.socket.migrateClientSubscriptions()},migrationComplete:function(b){if(c.clientMap[this.lastSessionId]){var d=c.clientMap[this.lastSessionId].getClientState();_.each(d.queuedMsgs,function(a){this.eventQueue.unshift(a)},this)}a.publish({channel:"postal.socket",topic:"client.migrated",data:{sessionId:this.socket.id,lastSessionId:this.lastSessionId}}),this.transition("connected")},subscribe:d,"*":function(){this.deferUntilTransition()}},connected:{_onEnter:function(){c.clientMap[this.sessionId]=this,this.socket.confirmClientIdentified(this.sessionId)},disconnect:function(){this.transition("disconnected")},subscribe:d,unsubscribe:function(a){this.subscriptions[a.channel]&&this.subscriptions[a.channel][a.topic]&&this.subscriptions[a.channel]&&this.subscriptions[a.channel][a.topic].unsubscribe()},publish:function(b){a.publish(b)},socketTransmit:function(a,b){this.socket.publish.call(this.socket,a,b)}},disconnected:{_onEnter:function(){a.publish({channel:"postal.socket",topic:"client.disconnect",data:{sessionId:this.sessionId}})},"*":function(){this.deferUntilTransition()},socketTransmit:function(){this.deferUntilTransition("connected")}}}});return _.each(["disconnect","subscribe","unsubscribe","publish","clientId","migrationComplete"],function(a){b.on(a,function(b){e.handle(a,b)})}),e.on("*",function(a,b){var c=[].slice.call(arguments,1);a==="Deferred"||c[0]==="socketTransmit"?console.log("Socket FSM: "+a+" - "+JSON.stringify(c[0])):console.log("Socket FSM: "+a+" - "+JSON.stringify(c))}),e.subscriptions._direct={_private:a.subscribe({channel:b.id,topic:"*",callback:function(a,b){e.handle("socketTransmit",a,b)}})},e.transition("connecting"),e},PostalSocketHost=function(a,b){var c=this;c.enableMigration=!0,c.channel=a.channel("postal.socket","client.connect"),c.clients=[],c.clientMap={},c.removeClient=function(a){c.clientMap[a]&&(_.each(c.clientMap[a].subscriptions,function(a){_.each(a,function(a){console.log("unsubscribing: "+a.channel+" - "+a.topic),a.unsubscribe()})}),delete c.clientMap[a]),c.clients=_.filter(c.clients,function(b){return b.sessionId!==a})},c.provider=b,c.provider.on("connect",function(b){c.clients.push(new RemoteClientProxy(a,b,c))}),c.channel.subscribe("client.disconnect",function(a,b){c.enableMigration||c.removeClient(a.sessionId)}),c.channel.subscribe("client.migrated",function(a,b){c.removeClient(a.lastSessionId)})};module.exports=PostalSocketHost